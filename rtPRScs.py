#!/usr/bin/env python


"""

Usage:
python OnlinePRScs.py --ref_dir=PATH_TO_REFERENCE --n_gwas=GWAS_SAMPLE_SIZE --pst_eff=POSTERIOR_EFFECTS --psi_est=PSI_ESTIMATES
                      --vld_prefix=VALIDATION_DATASET_PREFIX --vld_phn_cov=VALIDATION_DATASET_PHENOTYPE_COVARIATES --vld_frq_prefix=VALIDATION_FRQ_FILE_PREFIX
                      --tst_prefix=TESTING_DATASET_PREFIX --tst_phn_cov=TESTING_DATASET_PHENOTYPE_COVARIATES --tst_phn_cov_update=TESTING_DATASET_UPDATED_PHENOTYPE_COVARIATES --out_file=OUTPUT_FILENAME
                      [--rate=LEARNING_RATE --imp=IMPLICIT_SGD --order=ORDER_OF_ALGORITHM --chrom=CHROM] 


"""


import os
import sys
import getopt

import parse_genet
import online_pred
import write


def parse_param():
    long_opts_list = ['ref_dir=', 'n_gwas=', 'pst_eff=', 'psi_est=', 'vld_prefix=', 'vld_phn_cov=', 'vld_frq_prefix=',
                      'tst_prefix=', 'tst_phn_cov=', 'tst_phn_cov_update=', 'out_file=', 'rate=', 'imp=', 'order=', 'chrom=', 'help']

    param_dict = {'ref_dir': None, 'n_gwas': None, 'pst_eff': None, 'psi_est': None, 'vld_prefix': None, 'vld_phn_cov': None, 'vld_frq_prefix': None,
                  'tst_prefix': None, 'tst_phn_cov': None, 'tst_phn_cov_update': None, 'out_file': None, 'rate': 1.0, 'imp': 'True', 'order': '2nd', 'chrom': range(1,23)}

    print('\n')

    if len(sys.argv) > 1:
        try:
            opts, args = getopt.getopt(sys.argv[1:], "h", long_opts_list)
        except:
            print('Option not recognized.')
            print('Use --help for usage information.\n')
            sys.exit(2)

        for opt, arg in opts:
            if opt == "-h" or opt == "--help":
                print(__doc__)
                sys.exit(0)
            elif opt == "--ref_dir": param_dict['ref_dir'] = arg
            elif opt == "--n_gwas": param_dict['n_gwas'] = int(arg)
            elif opt == "--pst_eff": param_dict['pst_eff'] = arg
            elif opt == "--psi_est": param_dict['psi_est'] = arg
            elif opt == "--vld_prefix": param_dict['vld_prefix'] = arg
            elif opt == "--vld_phn_cov": param_dict['vld_phn_cov'] = arg
            elif opt == "--vld_frq_prefix": param_dict['vld_frq_prefix'] = arg
            elif opt == "--tst_prefix": param_dict['tst_prefix'] = arg
            elif opt == "--tst_phn_cov": param_dict['tst_phn_cov'] = arg
            elif opt == "--tst_phn_cov_update": param_dict['tst_phn_cov_update'] = arg
            elif opt == "--out_file": param_dict['out_file'] = arg
            elif opt == "--rate": param_dict['rate'] = float(arg)
            elif opt == "--imp": param_dict['imp'] = arg
            elif opt == "--order": param_dict['order'] = arg
            elif opt == "--chrom": param_dict['chrom'] = arg.split(',')
    else:
        print(__doc__)
        sys.exit(0)

    if param_dict['ref_dir'] == None:
        print('* Please specify the directory to the reference panel using --ref_dir\n')
        sys.exit(2)
    elif param_dict['n_gwas'] == None:
        print('* Please specify the sample size of the training GWAS using --n_gwas\n')
        sys.exit(2)
    elif param_dict['pst_eff'] == None:
        print('* Please specify the file for posterior effect size estimates generated by PRS-CS using --pst_eff\n')
        sys.exit(2)
    elif param_dict['psi_est'] == None:
        print('* Please specify the file for psi estimates generated by PRS-CS using --psi_file\n')
        sys.exit(2)
    elif param_dict['vld_prefix'] == None:
        print('* Please specify the directory and prefix of the plink files (.bed/.bim/.fam) for the validation dataset using --vld_prefix\n')
        sys.exit(2)
    elif param_dict['vld_phn_cov'] == None:
        print('* Please specify the directory and file name of the phenotype and covariates for the validation dataset using --vld_phn\n')
        sys.exit(2)
    elif param_dict['tst_prefix'] == None:
        print('* Please specify the directory and prefix of the plink files (.bed/.bim/.fam) for the testing dataset using --tst_prefix\n')
        sys.exit(2)
    elif param_dict['tst_phn_cov'] == None:
        print('* Please specify the directory and file name of the phenotype and covariates for the testing dataset using --tst_phn\n')
        sys.exit(2)
    elif param_dict['out_file'] == None:
        print('* Please specify the output directory and file name using --out_file\n')
        sys.exit(2)
    elif param_dict['rate'] <= 0:
        print('* The learning rate must be positive\n')
        sys.exit(2)
    elif param_dict['order'] != '1st' and param_dict['order'] != '2nd':
        print('* The order of the algorithm must be 1st or 2nd\n')

    for key in param_dict:
        print('--%s=%s' % (key, param_dict[key]))

    print('\n')
    return param_dict


def main():
    param_dict = parse_param()

    for chrom in param_dict['chrom']:
        print('##### process chromosome %d #####' % int(chrom))

        if '1kg' in os.path.basename(param_dict['ref_dir']):
            ref_dict = parse_genet.parse_ref(param_dict['ref_dir'] + '/snpinfo_1kg_hm3', int(chrom))
        elif 'ukbb' in os.path.basename(param_dict['ref_dir']):
            ref_dict = parse_genet.parse_ref(param_dict['ref_dir'] + '/snpinfo_ukbb_hm3', int(chrom))


        phn_mean, phn_std, cov_beta = parse_genet.parse_vld(param_dict['vld_prefix'], param_dict['vld_phn_cov'])

        if param_dict['vld_frq_prefix'] == None:
            frq_dict = None
        else:
            frq_dict = parse_genet.parse_frq(param_dict['vld_frq_prefix'], int(chrom))


        tst_dict = parse_genet.parse_tst(param_dict['tst_prefix'])


        pst_dict, tst_idx = parse_genet.parse_psteff(ref_dict, frq_dict, tst_dict, param_dict['pst_eff'], param_dict['psi_est'], int(chrom))

        ld_blk, blk_size = parse_genet.parse_ldblk(param_dict['ref_dir'], pst_dict, int(chrom))


        indv_dict, prs, beta_updt = online_pred.sgd(param_dict['n_gwas'], phn_mean, phn_std, cov_beta, param_dict['tst_prefix'], param_dict['tst_phn_cov'], param_dict['tst_phn_cov_update'],
                        pst_dict, tst_idx, ld_blk, blk_size, param_dict['rate'], param_dict['imp'], param_dict['order'], int(chrom))


        write.prs(param_dict['out_file'], indv_dict, prs, param_dict['rate'], param_dict['imp'], param_dict['order'], int(chrom))

        write.psteff(param_dict['out_file'], pst_dict, beta_updt, param_dict['rate'], param_dict['imp'], param_dict['order'], int(chrom))


        print('\n')


if __name__ == '__main__':
    main()


